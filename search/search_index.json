{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u6587\u6863 \u8fd9\u662f\u6211\u7684\u6587\u6863\u9996\u9875\u3002\u4ee5\u4e0b\u662f\u6587\u6863\u7684\u4e3b\u8981\u5185\u5bb9\uff1a \u5165\u95e8\u6307\u5357 \u9ad8\u7ea7\u914d\u7f6e","title":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u6587\u6863"},{"location":"#_1","text":"\u8fd9\u662f\u6211\u7684\u6587\u6863\u9996\u9875\u3002\u4ee5\u4e0b\u662f\u6587\u6863\u7684\u4e3b\u8981\u5185\u5bb9\uff1a \u5165\u95e8\u6307\u5357 \u9ad8\u7ea7\u914d\u7f6e","title":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u6587\u6863"},{"location":"advanced/configuration/","text":"\u9ad8\u7ea7\u914d\u7f6e \u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u8fdb\u884c\u9ad8\u7ea7\u914d\u7f6e\u3002 \u914d\u7f6e\u6587\u4ef6 config.yaml \u73af\u5883\u53d8\u91cf","title":"\u9ad8\u7ea7\u914d\u7f6e"},{"location":"advanced/configuration/#_1","text":"\u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u8fdb\u884c\u9ad8\u7ea7\u914d\u7f6e\u3002","title":"\u9ad8\u7ea7\u914d\u7f6e"},{"location":"advanced/configuration/#_2","text":"config.yaml \u73af\u5883\u53d8\u91cf","title":"\u914d\u7f6e\u6587\u4ef6"},{"location":"advanced/troubleshooting/","text":"","title":"Troubleshooting"},{"location":"getting-started/installation/","text":"","title":"Installation"},{"location":"getting-started/introduction/","text":"\u5165\u95e8\u6307\u5357 - \u7b80\u4ecb \u6b22\u8fce\u9605\u8bfb\u5165\u95e8\u6307\u5357\uff01\u672c\u8282\u5c06\u5e2e\u52a9\u4f60\u5feb\u901f\u4e0a\u624b\u3002 \u5185\u5bb9\u6982\u89c8 \u5b89\u88c5\u65b9\u6cd5 \u57fa\u672c\u7528\u6cd5","title":"\u5165\u95e8\u6307\u5357 - \u7b80\u4ecb"},{"location":"getting-started/introduction/#-","text":"\u6b22\u8fce\u9605\u8bfb\u5165\u95e8\u6307\u5357\uff01\u672c\u8282\u5c06\u5e2e\u52a9\u4f60\u5feb\u901f\u4e0a\u624b\u3002","title":"\u5165\u95e8\u6307\u5357 - \u7b80\u4ecb"},{"location":"getting-started/introduction/#_1","text":"\u5b89\u88c5\u65b9\u6cd5 \u57fa\u672c\u7528\u6cd5","title":"\u5185\u5bb9\u6982\u89c8"},{"location":"getting-started/OS%20Config/Linux/","text":"Install brew /bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\" .bashrc export PS1=\"\\e[01;36m\\][\\t] ${debian_chroot:+($debian_chroot)}\\u@\\h\\[\\e[01;35m\\]:\\w\\n\\[\\e[01;33m\\]$\\[\\e[00m\\] \" export HF_ENDPOINT=https://hf-mirror.com alias n='nvidia-smi' alias nvi='watch -n 0.1 nvidia-smi' alias nvfind='fuser -v /dev/nvidia*' alias sdi='sudo dpkg -i' alias l='ls -alF -h' alias d='du -h --max-depth 1' alias cb='cat ~/.bashrc' alias vb='vi ~/.bashrc' alias sb='source ~/.bashrc' alias sc='screen' alias cc='/home/user/opt/clash/clash -d /home/user/opt/clash' alias tat='tmux a -t' alias tl='tmux ls' alias jfu='journalctl -f -u' function psfind() { ps aux | head -n 1 ps aux | grep -E $1 | grep -v grep } function sp() { export http_proxy=http://127.0.0.1:7891 export HTTP_PROXY=http://127.0.0.1:7891 export https_proxy=http://127.0.0.1:7891 export HTTPS_PROXY=http://127.0.0.1:7891 export all_proxy=socks://127.0.0.1:7891 export ALL_PROXY=socks://127.0.0.1:7891 echo 'set proxy' } function usp() { unset http_proxy unset HTTP_PROXY unset https_proxy unset HTTPS_PROXY unset all_proxy unset ALL_PROXY echo 'unset proxy' } # >>> conda initialize >>> CONDA_PATH=/home/**/opt/miniconda3 BIN_PATH=$CONDA_PATH/bin/conda # !! Contents within this block are managed by 'conda init' !! __conda_setup=\"$($BIN_PATH 'shell.bash' 'hook' 2> /dev/null)\" if [ $? -eq 0 ]; then eval \"$__conda_setup\" else if [ -f \"$CONDA_PATH/etc/profile.d/conda.sh\" ]; then . \"$CONDA_PATH/etc/profile.d/conda.sh\" else export PATH=\"$CONDA_PATH/bin:$PATH\" fi fi unset __conda_setup # <<< conda initialize <<<","title":"Install brew"},{"location":"getting-started/OS%20Config/Linux/#install-brew","text":"/bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\"","title":"Install brew"},{"location":"getting-started/OS%20Config/Linux/#bashrc","text":"export PS1=\"\\e[01;36m\\][\\t] ${debian_chroot:+($debian_chroot)}\\u@\\h\\[\\e[01;35m\\]:\\w\\n\\[\\e[01;33m\\]$\\[\\e[00m\\] \" export HF_ENDPOINT=https://hf-mirror.com alias n='nvidia-smi' alias nvi='watch -n 0.1 nvidia-smi' alias nvfind='fuser -v /dev/nvidia*' alias sdi='sudo dpkg -i' alias l='ls -alF -h' alias d='du -h --max-depth 1' alias cb='cat ~/.bashrc' alias vb='vi ~/.bashrc' alias sb='source ~/.bashrc' alias sc='screen' alias cc='/home/user/opt/clash/clash -d /home/user/opt/clash' alias tat='tmux a -t' alias tl='tmux ls' alias jfu='journalctl -f -u' function psfind() { ps aux | head -n 1 ps aux | grep -E $1 | grep -v grep } function sp() { export http_proxy=http://127.0.0.1:7891 export HTTP_PROXY=http://127.0.0.1:7891 export https_proxy=http://127.0.0.1:7891 export HTTPS_PROXY=http://127.0.0.1:7891 export all_proxy=socks://127.0.0.1:7891 export ALL_PROXY=socks://127.0.0.1:7891 echo 'set proxy' } function usp() { unset http_proxy unset HTTP_PROXY unset https_proxy unset HTTPS_PROXY unset all_proxy unset ALL_PROXY echo 'unset proxy' } # >>> conda initialize >>> CONDA_PATH=/home/**/opt/miniconda3 BIN_PATH=$CONDA_PATH/bin/conda # !! Contents within this block are managed by 'conda init' !! __conda_setup=\"$($BIN_PATH 'shell.bash' 'hook' 2> /dev/null)\" if [ $? -eq 0 ]; then eval \"$__conda_setup\" else if [ -f \"$CONDA_PATH/etc/profile.d/conda.sh\" ]; then . \"$CONDA_PATH/etc/profile.d/conda.sh\" else export PATH=\"$CONDA_PATH/bin:$PATH\" fi fi unset __conda_setup # <<< conda initialize <<<","title":".bashrc"},{"location":"getting-started/OS%20Config/Windows/","text":"","title":"Windows"}]}